// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  createdAt         DateTime @default(now()) @map(name: "created_at")
  updatedAt         DateTime @default(now()) @map(name: "updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map(name: "accounts")
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map(name: "sessions")
  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @default(now()) @map(name: "updated_at")

  accounts Account[]
  sessions Session[]
  Post     Post[]
  // ApiKey ApiKey[]

  mercadopagoCustomerId       String?   @unique @map(name: "mercadopago_customer_id")
  mercadopagoSubscriptionId   String?   @unique @map(name: "mercadopago_subscription_id")
  mercadopagoPriceId          String?   @map(name: "mercadopago_price_id")
  mercadopagoCurrentPeriodEnd DateTime? @map(name: "mercadopago_current_period_end")

  apiKeyId String?

  @@map(name: "users")
}

// model ApiKey {
//   id String @id @default(cuid())
//   key String @unique
//   enabled Boolean @default(true)
//   User User @relation(fields: [userId], references: [id])
//   userId String

//   requests ApiRequest[]

//   @@unique([userId, key, enabled])
// }

// model ApiRequest {
//   id String @id @default(cuid())
//   timestamp DateTime @default(now())
//   method String
//   path String
//   status Int
//   duration Int

//   usedApiKey String

//   Apikey ApiKey @relation(fields: [apiKeyId], references: [id])
//   apiKeyId String

//   @@index([apiKeyId, timestamp])
// }

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Post {
  id        String   @id @default(cuid())
  title     String
  content   Json?
  published Boolean  @default(false)
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")
  authorId  String

  author User @relation(fields: [authorId], references: [id])

  @@map(name: "posts")
  @@index([authorId])
}
